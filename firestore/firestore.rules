rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {
    match /articles/{articleId} {
      allow get;
      allow create:
        if request.auth.uid != null
        && request.resource.data.body is string
        && request.resource.data.createdAt == request.time
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.bio == request.resource.data.createdBy.bio
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.name == request.resource.data.createdBy.name
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.image == request.resource.data.createdBy.image
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.namespaceId == request.resource.data.createdBy.namespaceId
        && request.resource.data.createdByUid == request.auth.uid
        && request.resource.data.title is string
        && request.resource.data.title.size() <= 1000
        && request.resource.data.updatedAt == request.time
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.bio == request.resource.data.updatedBy.bio
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.name == request.resource.data.updatedBy.name
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.image == request.resource.data.updatedBy.image
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.namespaceId == request.resource.data.updatedBy.namespaceId
        && request.resource.data.updatedByUid == request.auth.uid;
      allow update:
        if request.auth.uid != null
        && request.resource.data.body is string
        && request.resource.data.title is string
        && request.resource.data.title.size() <= 1000
        && request.resource.data.updatedAt == request.time
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.bio == request.resource.data.updatedBy.bio
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.name == request.resource.data.updatedBy.name
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.image == request.resource.data.updatedBy.image
        && get(/databases/$(database)/documents/profiles/$(request.auth.uid)).data.namespaceId == request.resource.data.updatedBy.namespaceId
        && request.resource.data.updatedByUid == request.auth.uid;
      allow list;
      allow delete:
        if request.auth.uid != null;
    }
    match /profiles/{profileId} {
      allow get;
      allow list:
        if request.query.limit == 1;
      allow update:
        if request.auth.uid != null
        && request.auth.uid == profileId
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["bio", "name", "namespaceId", "image", "social"]);
      allow create, delete:
        if false;
    }
    match /namespaces/{namespaceId} {
      allow get:
        if request.auth.uid != null;
      allow list:
        if request.auth.uid != null
        && request.query.limit == 1;
      allow create:
        if request.auth.uid != null
        && request.resource.data.model == "spaces"
        && request.resource.data.modelId == request.auth.uid;
      allow update, delete:
        if false;
    }
    match /spaces/{spaceId} {
      allow get:
        if request.auth.uid != null;
      allow update:
        if request.auth.uid != null
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(["description", "title", "namespaceId", "image", "settings", "social", "updatedAt", "updatedBy", "updatedByUid"])
        && (request.resource.data.description == null || request.resource.data.description is string)
        && (request.resource.data.description == null || request.resource.data.description.size() <= 1000)
        && (request.resource.data.title != null && request.resource.data.title is string)
        && (request.resource.data.image == null || request.resource.data.image is string);
      allow create, delete, list:
        if false;
    }
  }
}
